@page "/game"
@using MathGame.Services
@using MathGame.Data
@inject NumberService NumberService
@inject CalculationService CalculationService
@rendermode InteractiveServer


<h3>Random Number Game</h3>

<p>Enter numbers around the random number!</p>

<div class="game-container">
    <!-- Top boxes -->
    <div class="box top-left">
        <span>@boxes[0].MathProblem</span>
        <input @bind="boxes[0].Value" type="number" class="game-input @GetBoxCssClass(boxes[0])" />
    </div>
    <div class="box top-right">
        <span>@boxes[1].MathProblem</span>
        <input @bind="boxes[1].Value" type="number" class="game-input @GetBoxCssClass(boxes[1])" />
    </div>

    <!-- Middle row with left and right inputs and random number -->
    <div class="box left-top">
        <span>@boxes[2].MathProblem</span>
        <input @bind="boxes[2].Value" type="number" class="game-input @GetBoxCssClass(boxes[2])" />
    </div>
    <div class="box center">
        <span class="random-number">@randomNumber</span>
    </div>
    <div class="box right-top">
        <span>@boxes[3].MathProblem</span>
        <input @bind="boxes[3].Value" type="number" class="game-input @GetBoxCssClass(boxes[3])" />
    </div>

    <!-- Bottom boxes -->
    <div class="box bottom-left">
        <span>@boxes[4].MathProblem</span>
        <input @bind="boxes[4].Value" type="number" class="game-input @GetBoxCssClass(boxes[4])" />
    </div>
    <div class="box bottom-right">
        <span>@boxes[5].MathProblem</span>
        <input @bind="boxes[5].Value" type="number" class="game-input @GetBoxCssClass(boxes[5])" />
    </div>
    <div class="box bottom-right">
        <span>@boxes[6].MathProblem</span>
        <input @bind="boxes[6].Value" type="number" class="game-input @GetBoxCssClass(boxes[6])" />
    </div>
    <div class="box bottom-right">
        <span>@boxes[7].MathProblem</span>
        <input @bind="boxes[7].Value" type="number" class="game-input @GetBoxCssClass(boxes[7])" />
    </div>
</div>

<div class="button-container">
    <button type="button" class="btn btn-primary" @onclick="HandleGenerateNewNumber">Generate New Number</button>
    <button type="button" class="btn btn-secondary" @onclick="HandleCheckMath">Check Math</button>
</div>

<style>
    .game-container {
        display: grid;
        grid-template-rows: repeat(3, auto); /* Three rows for top, center, and bottom */
        grid-template-columns: repeat(5, auto); /* Five columns for plus sign layout */
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-top: 50px;
    }

    .box {
        display: flex;
        flex-direction: column; /* Stack math problem above the input */
        justify-content: center;
        align-items: center;
    }

    /* Position the boxes in the grid */
    .top-left {
        grid-row: 1;
        grid-column: 3; /* Adjusted for new layout */
    }

    .top-right {
        grid-row: 1;
        grid-column: 4; /* Adjusted for new layout */
    }

    .left-top {
        grid-row: 2;
        grid-column: 1; /* Adjusted for new layout */
    }

    .center {
        grid-row: 2;
        grid-column: 3; /* Center box remains */
    }

    .right-top {
        grid-row: 2;
        grid-column: 5; /* Adjusted for new layout */
    }

    .bottom-left {
        grid-row: 3;
        grid-column: 2; /* Adjusted for new layout */
    }

    .bottom-right {
        grid-row: 3;
        grid-column: 4; /* Adjusted for new layout */
    }

    .extended-left {
        grid-row: 2; /* Same row as the center box */
        grid-column: 1; /* Left of the center box */
    }

    .extended-right {
        grid-row: 2; /* Same row as the center box */
        grid-column: 5; /* Right of the center box */
    }

    .button-container {
        display: flex;
        justify-content: space-between; /* Align buttons on opposite sides */
        margin-top: 20px; /* Space above buttons */
    }

    .correct {
        background-color: green;
        color: white;
    }

    .incorrect {
        background-color: red;
        color: white;
    }

    .game-input {
        width: 60px;
        height: 40px;
        font-size: 18px;
        text-align: center;
        border: 2px solid #333;
        border-radius: 8px;
        outline: none;
    }
</style>

@code {
    // Declare variables for user input and random number
    private int randomNumber;
    private List<Box> boxes = new List<Box>();

    // This method is called when the component is initialized asynchronously
    protected override async Task OnInitializedAsync()
    {
        randomNumber = await NumberService.GenerateRandomNumberAsync(); // Get random number from the service
        await GenerateBoxes();
    }

    private async Task GenerateBoxes()
    {
        boxes.Clear(); // Clear existing boxes
        int[] adjustments = new int[] { -10, 10, -5, 5, -2, 2,-15, 15 }; // Possible adjustments
        foreach (var adjustment in adjustments)
        {
            int targetValue = randomNumber + adjustment;
            boxes.Add(new Box(targetValue)
                {
                    MathProblem = $"{randomNumber} {adjustment:+#;-#;0}" // Format for displaying math problem
                });
        }
    }

    // New method to generate a new random number and update boxes
    private async Task HandleGenerateNewNumber()
    {
        randomNumber = await NumberService.GenerateRandomNumberAsync();
        await GenerateBoxes();
        Console.WriteLine($"New random number generated: {randomNumber}"); // For debugging
    }

    private async Task HandleCheckMath()
    {
        foreach (var box in boxes)
        {
            box.IsCorrect = await CalculationService.IsMathCorrect(randomNumber, box.TargetValue, box.Value);
        }
    }

    private string GetBoxCssClass(Box box)
    {
        if (box.IsCorrect)
            return "correct";
        else if (box.Value != 0) // Only highlight boxes that have a value entered
            return "incorrect";

        return string.Empty; // No class if no input
    }
}
