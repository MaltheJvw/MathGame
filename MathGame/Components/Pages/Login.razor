@page "/login"
@using MathGame.Services
@using MathGame.Model
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject ProfileStateService ProfileStateService

<div class="login-container">
    <div class="login-card">
        <h3 class="login-title">Login</h3>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Username:</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
            </div>

            <div class="form-group">
                <label for="password">Password:</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
            </div>

            <button type="submit" class="btn btn-primary btn-block">Login</button>

            @if (loginFailed)
            {
                <p class="text-danger text-center">Login failed. Please check your username and password.</p>
            }
        </EditForm>
    </div>
</div>

<style>
    /* Global Styles */
    body {
        background-color: #f4f7f6;
        font-family: Arial, sans-serif;
    }

    /* Login Page Styles */
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    .login-card {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 400px;
        width: 100%;
    }

    .login-title {
        text-align: center;
        color: #333;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            font-weight: bold;
            color: #555;
        }

    .form-control {
        border-radius: 4px;
        border: 1px solid #ddd;
        padding: 10px;
        font-size: 16px;
    }

        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
        }

    .btn-primary {
        background-color: #007bff;
        border: none;
        border-radius: 4px;
        padding: 10px;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
        width: 100%;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }

    .text-danger {
        color: #dc3545;
        text-align: center;
    }
</style>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool loginFailed = false;

    private async Task HandleLogin()
    {
        try
        {
            Console.WriteLine("fail");
            var (user, profileId) = await UserService.LoginAsync(loginModel.Username, loginModel.Password);
            Console.WriteLine("fail2");
            if (user != null && profileId.HasValue)
            {
                Console.WriteLine("fail3");
                ProfileStateService.ProfileId = profileId.Value; // Set the ProfileId
                NavigationManager.NavigateTo($"/game/{profileId}");
            }
            else
            {
                loginFailed = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login: {ex.Message}");
            loginFailed = true;
        }
    }
}
